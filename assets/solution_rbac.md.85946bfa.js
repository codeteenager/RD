import{_ as a,o as e,c as r,V as t}from"./chunks/framework.a8438231.js";const i="/RD/image/2.png",o="/RD/image/3.png",l="/RD/image/4.png",p="/RD/image/5.png",c="/RD/image/6.png",m=JSON.parse('{"title":"RBAC权限管理","description":"","frontmatter":{},"headers":[],"relativePath":"solution/rbac.md","filePath":"solution/rbac.md","lastUpdated":1683869948000}'),n={name:"solution/rbac.md"},s=t('<h1 id="rbac权限管理" tabindex="-1">RBAC权限管理 <a class="header-anchor" href="#rbac权限管理" aria-label="Permalink to &quot;RBAC权限管理&quot;">​</a></h1><p>不管是开发手机APP，Web网站还是小程序等项目，基本上都需要一个后台管理系统的支撑。而每个后台管理系统都有一个通用的模块就是用户权限管理模块，权限管理是所有后台系统的都会涉及的一个重要组成部分，主要目的是对不同的用户访问资源进行权限的控制，避免因权限控制缺失或操作不当引发的风险问题，如操作错误，隐私数据泄露等问题。目前很多公司采用微服务架构，权限系统自然就独立出来了。</p><h2 id="rbac-模型的分类" tabindex="-1">RBAC 模型的分类 <a class="header-anchor" href="#rbac-模型的分类" aria-label="Permalink to &quot;RBAC 模型的分类&quot;">​</a></h2><p>RBAC 模型可以分为：RBAC0、RBAC1、RBAC2、RBAC3 四种。其中 RBAC0 是基础，其它三种都是在 RBAC0 基础上的变种。大部分情况下，使用 RBAC0 模型就可以满足常规的权限管理系统设计了。不过一定不要拘泥于模型，要以业务需要为先导。接下来简单对四种模型进行简单的介绍一下。</p><h3 id="rbac0-基本模型" tabindex="-1">RBAC0(基本模型) <a class="header-anchor" href="#rbac0-基本模型" aria-label="Permalink to &quot;RBAC0(基本模型)&quot;">​</a></h3><p>RBAC0 是基础，定义了能构成 RBAC 权限控制系统的最小的集合，RBAC0 模型为：</p><p><img src="'+i+'" alt=""></p><p>用户：是发起操作的主体，按类型分可分为2B和2C用户，可以是后台管理系统的用户，可以是OA系统的内部员工，也可以是面向C端的用户，比如阿里云的用户。</p><p>角色：起到了桥梁的作用，连接了用户和权限的关系，每个角色可以关联多个权限，同时一个用户关联多个角色，那么这个用户就有了多个角色的多个权限。</p><p>权限：是用户可以访问的资源，包括页面权限、操作权限、数据权限:</p><ul><li>页面权限: 即用户登录系统可以看到的页面，由菜单来控制，菜单包括一级菜单和二级菜单，只要用户有一级和二级菜单的权限，那么用户就可以访问页面</li><li>操作权限: 即页面的功能按钮，包括查看、新增、修改、删除、审核等，用户点击删除按钮时，后台会校验用户角色下的所有权限是否包含该删除权限。如果是，就可以进行下一步操作，反之提示无权限。有的系统要求&quot;可见即可操作&quot;，意思是如果页面上能够看到操作按钮，那么用户就可以操作，要实现此需求，这里就需要前端来配合，前端开发把用户的权限信息缓存，在页面判断用户是否包含此权限，如果有，就显示该按钮，如果没有，就隐藏该按钮。某种程度上提升了用户体验，但是在实际场景可自行选择是否需要这样做</li><li>数据权限: 数据权限就是用户在同一页面看到的数据是不同的，比如财务部只能看到其部门下的用户数据，采购部只看采购部的数据。在一些大型的公司，全国有很多城市和分公司，比如杭州用户登录系统只能看到杭州的数据，上海用户只能看到上海的数据，解决方案一般是把数据和具体的组织架构关联起来。</li></ul><p>有人会问了为什么用户不直接关联权限呢？在用户基数小的系统,比如20个人的小系统，管理员可以直接把用户和权限关联，工作量并不大，选择一个用户勾选下需要的权限就完事了。</p><p>但是在实际企业系统中，用户基数比较大,其中很多人的权限都是一样的，就是个普通访问权限，如果管理员给100人甚至更多授权,工作量巨大。</p><p>这就引入了&quot;角色(Role)&quot;概念，一个角色可以与多个用户关联，管理员只需要把该角色赋予用户，那么用户就有了该角色下的所有权限，这样设计既提升了效率，也有很大的拓展性。</p><p>用户和角色，角色和权限都是多对多的关系，这种模型是最通用的权限管理模型，节省了很大的权限维护成本， 但是实际的业务千变万化，权限管理的模型也需要根据不同的业务模型适当的调整，比如一个公司内部的组织架构是分层级的，层级越高权限越大，因为层级高的人不仅要拥有自己下属拥有的权限，二期还要有一些额外的权限。</p><p>RBAC模型可以给不同层级的人分配不同的角色，层级高的对应角色的权限就多，这样的处理方式可以解决问题，但是有没有更好的解决办法呢，答案肯定是有的，这就引出 角色继承的RBAC模型。</p><h3 id="rbac1-角色分层模型" tabindex="-1">RBAC1(角色分层模型) <a class="header-anchor" href="#rbac1-角色分层模型" aria-label="Permalink to &quot;RBAC1(角色分层模型)&quot;">​</a></h3><p>RBAC1 在 RBAC0 的基础之上引入了角色继承的概念，有了继承那么角色就有了上下级或者等级关系。父角色拥有其子角色所有的许可。通俗讲就是来说： 你能干的，你的领导一定能干，反过来就不一定能行。其模型如下：</p><p><img src="'+o+'" alt=""></p><p>此模型引入了角色继承(Hierarchical Role)概念,即角色具有上下级的关系,角色间的继承关系可分为一般继承关系和受限继承关系。一般继承关系仅要求角色继承关系是一个绝对偏序关系，允许角色间的多继承。而受限继承关系则进一步要求角色继承关系是一个树结构，实现角色间的单继承。这种设计可以给角色分组和分层，一定程度简化了权限管理工作。</p><h3 id="rbac2-角色限制模型" tabindex="-1">RBAC2(角色限制模型) <a class="header-anchor" href="#rbac2-角色限制模型" aria-label="Permalink to &quot;RBAC2(角色限制模型)&quot;">​</a></h3><p>基于核心模型的基础上，进行了角色的约束控制,RBAC2模型中添加了责任分离关系,其规定了权限被赋予角色时，或角色被赋予用户时，以及当用户在某一时刻激活一个角色时所应遵循的强制性规则。责任分离包括静态责任分离和动态责任分离。主要包括以下约束:</p><ul><li>互斥角色: 同一用户只能分配到一组互斥角色集合中至多一个角色，支持责任分离的原则。互斥角色是指各自权限互相制约的两个角色。比如财务部有会计和审核员两个角色，他们是互斥角色，那么用户不能同时拥有这两个角色，体现了职责分离原则。</li><li>基数约束: 一个角色被分配的用户数量受限。一个用户可拥有的角色数目受限。同样一个角色对应的访问权限数目也应受限，以控制高级权限在系统中的分配。</li><li>先决条件角色: 即用户想获得某上级角色，必须先获得其下一级的角色。比如技术负责人的角色和普通技术员工角色是上下级关系，那么用户想要用户技术负责人的角色就要先拥有普通技术员工的角色。</li></ul><h3 id="rbac3-统一模型" tabindex="-1">RBAC3(统一模型) <a class="header-anchor" href="#rbac3-统一模型" aria-label="Permalink to &quot;RBAC3(统一模型)&quot;">​</a></h3><p>即最全面的权限管理，它是基于RBAC0，将RBAC1和RBAC2进行了整合。统一模型RBAC3可以解决上面三个例子的所有问题。当然，只有在系统对权限要求非常复杂时，才考虑使用此权限模型。</p><h2 id="基于rbac的延展-用户组" tabindex="-1">基于RBAC的延展--用户组 <a class="header-anchor" href="#基于rbac的延展-用户组" aria-label="Permalink to &quot;基于RBAC的延展--用户组&quot;">​</a></h2><p>当平台用户基数增大，角色类型增多时，而且有一部分人具有相同的属性，比如财务部的所有员工，如果直接给用户分配角色，管理员的工作量就会很大。</p><p>如果把相同属性的用户归类到某用户组，那么管理员直接给用户组分配角色，用户组里的每个用户即可拥有该角色，以后其他用户加入用户组后，即可自动获取用户组的所有角色，退出用户组，同时也撤销了用户组下的角色，无须管理员手动管理角色。</p><p>根据用户组是否有上下级关系,可以分为有上下级的用户组和普通用户组:</p><ul><li>具有上下级关系的用户组: 最典型的例子就是部门和职位，可能多数人没有把部门职位和用户组关联起来吧。当然用户组是可以拓展的，部门和职位常用于内部的管理系统，如果是面向C端的系统。比如淘宝网的商家，商家自身也有一套组织架构，比如采购部，销售部，客服部，后勤部等，有些人拥有客服权限，有些人拥有上架权限等等，所以用户组是可以拓展的</li><li>普通用户组: 即没有上下级关系，和组织架构，职位都没有关系，也就是说可以跨部门，跨职位。举个例子，某电商后台管理系统，有拼团活动管理角色，我们可以设置一个拼团用户组，该组可以包括研发部的后台开发人员，运营部的运营人员，采购部的人员等等。</li></ul><p>每个公司都会涉及到到组织和职位，下面就重点介绍这两个。</p><h3 id="组织" tabindex="-1">组织 <a class="header-anchor" href="#组织" aria-label="Permalink to &quot;组织&quot;">​</a></h3><p>每个公司都有自己的组织架构，很多时候权限的分配可以根据组织架构来划分。因为同一个组织内的小伙伴使用的大部分权限是一样的。如下所示一个公司的组织架构图： <img src="'+l+'" alt=""></p><p>按照这个组织架构，每一个组织里的成员使用的基础权限很可能是一样的，比如人力资源都需要看到人才招聘的相关信息，市场推广都需要看到行业分析的相关信息，按照组织来分配角色会有很多优势：</p><p>实现权限分配的自动化：和组织关系打通之后，按照组织来分配角色，如果有新入职的用户，被划分在某个组织下面之后，会自动获取该组织下所有的权限，无需人工分配。又比如有用户调岗，只需要把组织关系调整就可以了，权限会跟着组织关系自动调整，也无需人工干预。这么做首先需要把权限和组织关系打通。</p><p>控制数据权限：把角色关联到组织，组织里的成员只能看到本组织下的数据，比如市场推广和大客定制，市场推广针对的是零散的客户，大可定制针对的是有一定体量的客户，相互的数据虽然在一个平台，但是只能看自己组织下的数据。</p><p>加入组织之后的RBAC模型如下所示： <img src="'+p+'" alt=""></p><p>用户可以在多个组织中，因为组织也有层级结构，一个组织里只可以有多个用户，所以用户和组织的关系是多对多的关系，组织和角色的关系是一对一的关系。这个在工作中可以根据实际情况来确定对应关系。</p><h3 id="职位" tabindex="-1">职位 <a class="header-anchor" href="#职位" aria-label="Permalink to &quot;职位&quot;">​</a></h3><p>一个组织下面会有很多职位，比如财务管理会有财务总监、财务主管、会计、出纳员等职位，每个职位需要的权限是不一样的，可以像组织那样根据职位来分配不同的角色，由于一个人的职位是固定的，所以用户跟职位的对应关系时一对一的关系，职位跟角色的对应关系可以是多对多的关系。加入职位的RBAC模型如下所示： <img src="'+c+'" alt=""></p>',40),h=[s];function R(d,A,C,B,b,_){return e(),r("div",null,h)}const q=a(n,[["render",R]]);export{m as __pageData,q as default};
