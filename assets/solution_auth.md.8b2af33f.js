import{_ as a,o as e,c as t,V as o}from"./chunks/framework.ec431b68.js";const i="/RD/image/1.png",k=JSON.parse('{"title":"鉴权","description":"","frontmatter":{},"headers":[],"relativePath":"solution/auth.md","filePath":"solution/auth.md","lastUpdated":1683786908000}'),r={name:"solution/auth.md"},l=o('<h1 id="鉴权" tabindex="-1">鉴权 <a class="header-anchor" href="#鉴权" aria-label="Permalink to &quot;鉴权&quot;">​</a></h1><h2 id="常见的鉴权方式" tabindex="-1">常见的鉴权方式 <a class="header-anchor" href="#常见的鉴权方式" aria-label="Permalink to &quot;常见的鉴权方式&quot;">​</a></h2><h3 id="session-cookie" tabindex="-1">Session/Cookie <a class="header-anchor" href="#session-cookie" aria-label="Permalink to &quot;Session/Cookie&quot;">​</a></h3><p>优点：较易扩展，简单</p><p>缺点：安全性低，性能低，服务端存储。多服务器同步session困难，跨平台困难</p><h3 id="jwt" tabindex="-1">JWT <a class="header-anchor" href="#jwt" aria-label="Permalink to &quot;JWT&quot;">​</a></h3><p>优点：以扩展，支持移动设备，跨应用调用，安全，承载信息丰富。</p><p>缺点：刷新与过期处理，Payload不易过大，中间人攻击。</p><h3 id="oauth" tabindex="-1">Oauth <a class="header-anchor" href="#oauth" aria-label="Permalink to &quot;Oauth&quot;">​</a></h3><p>优点：开放、安全、简单、权限指定，缺点，需要增加授权服务器，增加网络请求</p><h2 id="什么是jwt" tabindex="-1">什么是JWT? <a class="header-anchor" href="#什么是jwt" aria-label="Permalink to &quot;什么是JWT?&quot;">​</a></h2><p>JWT的全称是JSON Web Token，一个JWT由三部分构成：Header,Payload,Signature</p><ul><li>Header规定了token加密的方式和token的类型，</li><li>payload是token中包含用户的一些信息，比如用户名、过期时间</li><li>Signature包含header的base64值+payload的base64值+secret</li></ul><p>JWT的特点：</p><ul><li>防CSRF(主要是伪造请求，带上Cookie)</li><li>适合移动应用</li><li>无状态，编码数据</li></ul><p>在线JWT网站<a href="jwt.io">jwt.io</a></p><p>客户端往服务发送登录请求，服务端验证后，返回token给客户端，客户端每次请求接口的时候都会带上header部分带上token并进行请求。然后服务端使用secret进行解密，来验证从客户端传递过来的token是不是一个有效的token。如果验证通过则返回数据。</p><p><img src="'+i+'" alt=""></p><h2 id="算法-加密" tabindex="-1">算法/加密 <a class="header-anchor" href="#算法-加密" aria-label="Permalink to &quot;算法/加密&quot;">​</a></h2><p>算法中的指令描述的是一个计算，当其运行时能从一个初始状态和初始输入(可能为空)开始，经过一系列有限而清晰定义的状态最终产生输出并停止于一个终态。</p><p>数据加密的基本过程，就是对原来为明文的文件或数据按某种算法进行处理，使其称为不可读的一段代码，通常称为密文。通过这样的途径，来达到保护数据不被非法人窃取、阅读的目的。</p><h2 id="安全传输协议https" tabindex="-1">安全传输协议HTTPS <a class="header-anchor" href="#安全传输协议https" aria-label="Permalink to &quot;安全传输协议HTTPS&quot;">​</a></h2><p>HTTPS(HyperText Transfer Protocol Secure)超文本传输安全协议，常称为HTTP over TLS、HTTP over SSL或HTTP Secure)是一种通过计算机网络进行安全通信的传输协议。</p><p>那么API安全如何保障？</p><ul><li>通信信道加密：使用HTTPS</li><li>通信数据加密：密文+加密关键数据</li><li>通信安全策略：授权中间层、尝试次数、过期策略...</li></ul>',25),s=[l];function n(h,d,p,c,u,T){return e(),t("div",null,s)}const P=a(r,[["render",n]]);export{k as __pageData,P as default};
